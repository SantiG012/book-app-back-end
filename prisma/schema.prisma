generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model author {
  authorid       String        @id(map: "pk_author") @db.VarChar(80)
  authorname     String        @db.VarChar(50)
  authorlastname String        @db.VarChar(50)
  authorstatus   String        @db.VarChar(10)
  book_author    book_author[]

  @@unique([authorname, authorlastname], map: "author_unique_key")
}

model book {
  bookid           String             @id(map: "pk_book") @db.VarChar(80)
  booktitle        String             @unique(map: "unique_name_books") @db.VarChar(50)
  coverurl         String?            @db.VarChar(100)
  bookstatus       String             @db.VarChar(10)
  book_author      book_author[]
  collections_book collections_book[]
}

model book_author {
  bookid           String @db.VarChar(80)
  authorid         String @db.VarChar(80)
  bookauthorstatus String @db.VarChar(10)
  author           author @relation(fields: [authorid], references: [authorid], onDelete: NoAction, onUpdate: NoAction)
  book             book   @relation(fields: [bookid], references: [bookid], onDelete: NoAction, onUpdate: NoAction)

  @@id([bookid, authorid], map: "pk_book_author")
}

model collections {
  collectionid     String             @id(map: "pk_collections") @db.VarChar(80)
  collectionname   String             @unique(map: "unique_name_collections") @db.VarChar(50)
  coverurl         String?            @db.VarChar(100)
  userid           String?            @db.VarChar(15)
  collectionstatus String             @db.VarChar(10)
  users            users?             @relation(fields: [userid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
  collections_book collections_book[]
}

model collections_book {
  bookid                String      @db.VarChar(80)
  collectionid          String      @db.VarChar(80)
  collectionsbookstatus String      @db.VarChar(10)
  book                  book        @relation(fields: [bookid], references: [bookid], onDelete: NoAction, onUpdate: NoAction)
  collections           collections @relation(fields: [collectionid], references: [collectionid], onDelete: NoAction, onUpdate: NoAction)

  @@id([bookid, collectionid], map: "pk_collections_book")
}

model users {
  userid       String        @id(map: "pk_users") @db.VarChar(15)
  username     String        @db.VarChar(40)
  userlastname String        @db.VarChar(40)
  userstatus   String        @db.VarChar(10)
  password     String        @default("123") @db.VarChar(255)
  collections  collections[]
}
